### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   SolarPanelSimple(; name, G, A, η_ref, T_ref, β, α, ϵ, σ)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `G`         |                          | --  |   1361 |
| `A`         |                          | --  |   5 |
| `η_ref`         |                          | --  |   0.3 |
| `T_ref`         |                          | K  |   300 |
| `β`         |                          | --  |   0.004 |
| `α`         |                          | --  |   0.9 |
| `ϵ`         |                          | --  |   0.8 |
| `σ`         |                          | --  |   5.67e-8 |

## Connectors

 * `θ` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `in_sunlight` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `G_eff`         |                          | --  | 
| `T`         |                          | K  | 
| `η`         |                          | --  | 
| `P`         |                          | --  | 
"""
@component function SolarPanelSimple(; name, G=1361, A=5, η_ref=0.3, T_ref=300, β=0.004, α=0.9, ϵ=0.8, σ=5.67e-8)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters
  append!(__params, @parameters (G::Real = G))
  append!(__params, @parameters (A::Real = A))
  append!(__params, @parameters (η_ref::Real = η_ref))
  append!(__params, @parameters (T_ref::Real = T_ref))
  append!(__params, @parameters (β::Real = β))
  append!(__params, @parameters (α::Real = α))
  append!(__params, @parameters (ϵ::Real = ϵ))
  append!(__params, @parameters (σ::Real = σ))

  ### Variables
  append!(__vars, @variables (θ(t)::Real), [input = true])
  append!(__vars, @variables (in_sunlight(t)::Real), [input = true])
  append!(__vars, @variables (G_eff(t)::Real))
  append!(__vars, @variables (T(t)::Real))
  append!(__vars, @variables (η(t)::Real))
  append!(__vars, @variables (P(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components

  ### Guesses

  ### Defaults

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  push!(__eqs, T ~ ((α * G_eff) / (ϵ * σ)) ^ (1 / 4))
  push!(__eqs, G_eff ~ max(G * cos(θ) * in_sunlight, 0))
  push!(__eqs, η ~ η_ref * (1 - β * (T - T_ref)))
  push!(__eqs, P ~ G_eff * A * η)

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export SolarPanelSimple
