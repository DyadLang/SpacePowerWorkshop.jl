### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   SolarPanel(; name, G, A, η_ref, T_ref, β1, α1, ϵ, σ, V_oc, V_mpp, area, q, Ns, k, T0, Isc, Im, Vm, Voc, β2, α2, λ, Irs)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `G`         |                          | --  |   1361 |
| `A`         |                          | --  |   3.377695551748622 |
| `η_ref`         |                          | --  |   0.3 |
| `T_ref`         |                          | K  |   300 |
| `β1`         |                          | --  |   0.004 |
| `α1`         |                          | --  |   0.9 |
| `ϵ`         |                          | --  |   0.8 |
| `σ`         |                          | --  |   5.67e-8 |
| `V_oc`         |                          | --  |   21 |
| `V_mpp`         |                          | --  |   17 |
| `area`         |                          | --  |   0.0027 |
| `q`         |                          | --  |   1.602e-19 |
| `Ns`         |                          | --  |   1 |
| `k`         |                          | --  |   1.38e-23 |
| `T0`         |                          | --  |   301.15 |
| `Isc`         |                          | --  |   area * 0.018 / 0.0001 |
| `Im`         |                          | --  |   area * 0.0175 / 0.0001 |
| `Vm`         |                          | --  |   2.406 |
| `Voc`         |                          | --  |   2.72 |
| `β2`         |                          | --  |   -0.0056 |
| `α2`         |                          | --  |   0.00001 |
| `λ`         |                          | --  |   38.54788528033841 |
| `Irs`         |                          | --  |   area * 5.9419090728228655e-16 / 0.0001 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `θ` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `in_sunlight` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `sun_facing` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         |                          | V  | 
| `i`         |                          | A  | 
| `G_eff`         |                          | --  | 
| `T`         |                          | K  | 
| `η`         |                          | --  | 
| `P`         |                          | --  | 
| `Is`         |                          | --  | 
| `Iph`         |                          | --  | 
| `ΔT`         |                          | K  | 
| `ex_term`         |                          | --  | 
"""
@component function SolarPanel(; name, G=1361, A=3.377695551748622, η_ref=0.3, T_ref=300, β1=0.004, α1=0.9, ϵ=0.8, σ=5.67e-8, V_oc=21, V_mpp=17, area=0.0027, q=1.602e-19, Ns=1, k=1.38e-23, T0=301.15, Isc=area * 0.018 / 0.0001, Im=area * 0.0175 / 0.0001, Vm=2.406, Voc=2.72, β2=-0.0056, α2=0.00001, λ=38.54788528033841, Irs=area * 5.9419090728228655e-16 / 0.0001)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (G::Float64 = G))
  append!(__params, @parameters (A::Float64 = A))
  append!(__params, @parameters (η_ref::Float64 = η_ref))
  append!(__params, @parameters (T_ref::Float64 = T_ref))
  append!(__params, @parameters (β1::Float64 = β1))
  append!(__params, @parameters (α1::Float64 = α1))
  append!(__params, @parameters (ϵ::Float64 = ϵ))
  append!(__params, @parameters (σ::Float64 = σ))
  append!(__params, @parameters (V_oc::Float64 = V_oc))
  append!(__params, @parameters (V_mpp::Float64 = V_mpp))
  append!(__params, @parameters (area::Float64 = area))
  append!(__params, @parameters (q::Float64 = q))
  append!(__params, @parameters (Ns::Float64 = Ns))
  append!(__params, @parameters (k::Float64 = k))
  append!(__params, @parameters (T0::Float64 = T0))
  append!(__params, @parameters (Isc::Float64 = Isc))
  append!(__params, @parameters (Im::Float64 = Im))
  append!(__params, @parameters (Vm::Float64 = Vm))
  append!(__params, @parameters (Voc::Float64 = Voc))
  append!(__params, @parameters (β2::Float64 = β2))
  append!(__params, @parameters (α2::Float64 = α2))
  append!(__params, @parameters (λ::Float64 = λ))
  append!(__params, @parameters (Irs::Float64 = Irs))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables θ(t), [input = true])
  append!(__vars, @variables in_sunlight(t), [input = true])
  append!(__vars, @variables sun_facing(t), [input = true])
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)))
  append!(__vars, @variables (G_eff(t)))
  append!(__vars, @variables (T(t)))
  append!(__vars, @variables (η(t)))
  append!(__vars, @variables (P(t)))
  append!(__vars, @variables (Is(t)))
  append!(__vars, @variables (Iph(t)))
  append!(__vars, @variables (ΔT(t)))
  append!(__vars, @variables (ex_term(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, T ~ ((α1 * G) / (ϵ * σ)) ^ (1 / 4))
  push!(__eqs, G_eff ~ G * cos(θ) * in_sunlight * sun_facing)
  push!(__eqs, η ~ η_ref * (1 - β1 * (T - T_ref)))
  push!(__eqs, P ~ i * abs(v))
  push!(__eqs, ΔT ~ T - T0)
  push!(__eqs, Is ~ (exp(abs(β2) * ΔT * λ / A) * G_eff * (Isc + α2 * ΔT)) / ((G_eff * Isc / Irs + 1) ^ (T0 / (ΔT + T0)) - exp((abs(β2) * ΔT * λ) / A)))
  push!(__eqs, Iph ~ G_eff * (Isc + α2 * ΔT))
  push!(__eqs, i ~ Iph - Is * (exp((q * (-v)) / (Ns * k * A * T)) - 1))
  push!(__eqs, ex_term ~ exp((q * (-v)) / (Ns * k * A * T)))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export SolarPanel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(SolarPanel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
