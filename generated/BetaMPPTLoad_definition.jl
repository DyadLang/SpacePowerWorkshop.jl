### DO NOT EDIT THIS FILE
### This file is auto-generated by the JSML command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the JSML source code and regenerate this file


"""
   BetaMPPTLoad(; name, β, q, K, hotel_load, capacity, power_rate)

A simple linear resistor model maybe name = MPPT Power Supply

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `β`         |                          | --  |    |
| `q`         | parameter σ::Real                         | --  |   1.602176634e-19 |
| `K`         |                          | --  |   1.380649e-23 |
| `hotel_load`         |                          | --  |   50 |
| `capacity`         |                          | --  |   4 |
| `power_rate`         |                          | --  |   300 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `T` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `Vt` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         |                          | V  | 
| `i`         |                          | A  | 
| `c`         | parameter N::Real                         | --  | 
| `stored_energy`         |                          | --  | 
| `charge_power`         |                          | --  | 
"""
@component function BetaMPPTLoad(; name, β=nothing, q=1.602176634e-19, K=1.380649e-23, hotel_load=50, capacity=4, power_rate=300)
  params = @parameters begin
    (β::Float64 = β)
    (q::Float64 = q), [description = "parameter σ::Real"]
    (K::Float64 = K)
    (hotel_load::Float64 = hotel_load)
    (capacity::Float64 = capacity)
    (power_rate::Float64 = power_rate)
  end
  vars = @variables begin
    T(t), [input = true]
    Vt(t), [input = true]
    v(t)
    i(t)
    c(t), [description = "parameter N::Real"]
    stored_energy(t)
    charge_power(t)
  end
  systems = @named begin
    p = __JSML__Pin()
    n = __JSML__Pin()
  end
  defaults = Dict([
  ])
  eqs = Equation[
    v ~ p.v - n.v
    i ~ p.i
    p.i + n.i ~ 0
    log(max(i / v, 0.1)) - c * v ~ β
    # c = q / (σ*K*T*N)
    c ~ 1 / Vt
    D(stored_energy) ~ charge_power
    charge_power ~ min(max(i * v - hotel_load, -power_rate * (tanh(10 * (stored_energy - 0.2)) + 1) / 2), power_rate * (tanh(10 * (-stored_energy + capacity)) + 1) / 2)
  ]
  return ODESystem(eqs, t, vars, params; systems, defaults, name)
end
export BetaMPPTLoad
Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(BetaMPPTLoad)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
