### DO NOT EDIT THIS FILE
### This file is auto-generated by the JSML command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the JSML source code and regenerate this file


"""
   PVCell(; name, Rs, Rp, T, Gn, ipv_n, Ki, a, Ns, Vocn, Iscn, Kv, k, q)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `Rs`         |                          | --  |   0.221 |
| `Rp`         |                          | --  |   415.405 |
| `T`         |                          | --  |   300.15 |
| `Gn`         |                          | --  |   1000 |
| `ipv_n`         |                          | --  |   8.214 |
| `Ki`         |                          | --  |   0.0032 |
| `a`         | parameter ΔT::Real = 48.0                         | --  |   1.3 |
| `Ns`         |                          | --  |   54 |
| `Vocn`         |                          | --  |   32.9 |
| `Iscn`         |                          | --  |   8.21 |
| `Kv`         |                          | --  |   -0.123 |
| `k`         |                          | --  |   1.380649e-23 |
| `q`         |                          | --  |   1.602176634e-19 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `T_reading` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `G`         |                          | --  | 
| `ΔT`         |                          | --  | 
| `ipv`         |                          | --  | 
| `i0`         |                          | --  | 
| `Vt`         |                          | --  | 
| `rolloff`         |                          | --  | 
"""
@component function PVCell(; name, Rs=0.221, Rp=415.405, T=300.15, Gn=1000, ipv_n=8.214, Ki=0.0032, a=1.3, Ns=54, Vocn=32.9, Iscn=8.21, Kv=-0.123, k=1.380649e-23, q=1.602176634e-19)
  params = @parameters begin
    (Rs::Float64 = Rs)
    (Rp::Float64 = Rp)
    (T::Float64 = T)
    (Gn::Float64 = Gn)
    (ipv_n::Float64 = ipv_n)
    (Ki::Float64 = Ki)
    (a::Float64 = a), [description = "parameter ΔT::Real = 48.0"]
    (Ns::Float64 = Ns)
    (Vocn::Float64 = Vocn)
    (Iscn::Float64 = Iscn)
    (Kv::Float64 = Kv)
    (k::Float64 = k)
    (q::Float64 = q)
  end
  vars = @variables begin
    T_reading(t), [input = true]
    G(t)
    ΔT(t)
    ipv(t)
    i0(t)
    Vt(t)
    rolloff(t)
  end
  systems = @named begin
    p = __JSML__Pin()
    n = __JSML__Pin()
    I = Example1.CurrentSensor()
    V = Example1.VoltageSensor()
    Rs_c = Example1.Resistor(R=Rs)
    Rp_c = Example1.Resistor(R=Rp)
    Im = Example1.CurrentSource()
  end
  defaults = Dict([
  ])
  eqs = Equation[
    ΔT ~ T - T_reading
    ipv ~ G / Gn * (ipv_n + Ki * ΔT)
    Vt ~ Ns * (T + ΔT) * k / q
    i0 ~ (Iscn + Ki * ΔT) / (exp((Vocn + Kv * ΔT) / (a * Vt)) - 1)
    rolloff ~ (exp((V.v + Rs * I.i) / (Vt * a)) - 1)
    Im.I ~ ipv - i0 * rolloff
    connect(I.n, p)
    connect(V.n, Rp_c.n, Im.n, n)
    connect(Rs_c.n, V.p, I.p)
    connect(Im.p, Rp_c.p, Rs_c.p)
  ]
  return ODESystem(eqs, t, vars, params; systems, defaults, name)
end
export PVCell
Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PVCell)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
