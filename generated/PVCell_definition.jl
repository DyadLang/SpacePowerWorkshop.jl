### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   PVCell(; name, Rs, Rp, T, Gn, ipv_n, Ki, a, Ns, Vocn, Iscn, Kv, k, q)

Photovoltaic cell model floating in space

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `Rs`         |                          | --  |   0.221 |
| `Rp`         |                          | --  |   415.405 |
| `T`         |                          | --  |   300.15 |
| `Gn`         |                          | --  |   1000 |
| `ipv_n`         |                          | --  |   8.214 |
| `Ki`         |                          | --  |   0.0032 |
| `a`         |                          | --  |   1.3 |
| `Ns`         |                          | --  |   54 |
| `Vocn`         |                          | --  |   32.9 |
| `Iscn`         |                          | --  |   8.21 |
| `Kv`         |                          | --  |   -0.123 |
| `k`         |                          | --  |   1.380649e-23 |
| `q`         |                          | --  |   1.602176634e-19 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `T_reading` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `G` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `Vt` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `ΔT`         |                          | --  | 
| `ipv`         |                          | --  | 
| `i0`         |                          | --  | 
| `rolloff`         |                          | --  | 
| `over_v`         |                          | --  | 
"""
@component function PVCell(; name, Rs=0.221, Rp=415.405, T=300.15, Gn=1000, ipv_n=8.214, Ki=0.0032, a=1.3, Ns=54, Vocn=32.9, Iscn=8.21, Kv=-0.123, k=1.380649e-23, q=1.602176634e-19)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Rs::Real = Rs))
  append!(__params, @parameters (Rp::Real = Rp))
  append!(__params, @parameters (T::Real = T))
  append!(__params, @parameters (Gn::Real = Gn))
  append!(__params, @parameters (ipv_n::Real = ipv_n))
  append!(__params, @parameters (Ki::Real = Ki))
  append!(__params, @parameters (a::Real = a))
  append!(__params, @parameters (Ns::Real = Ns))
  append!(__params, @parameters (Vocn::Real = Vocn))
  append!(__params, @parameters (Iscn::Real = Iscn))
  append!(__params, @parameters (Kv::Real = Kv))
  append!(__params, @parameters (k::Real = k))
  append!(__params, @parameters (q::Real = q))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables T_reading(t), [input = true])
  append!(__vars, @variables G(t), [input = true])
  append!(__vars, @variables Vt(t), [output = true])
  append!(__vars, @variables (ΔT(t)))
  append!(__vars, @variables (ipv(t)))
  append!(__vars, @variables (i0(t)))
  append!(__vars, @variables (rolloff(t)))
  append!(__vars, @variables (over_v(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named V = ElectricalComponents.VoltageSensor())
  push!(__systems, @named Im = ElectricalComponents.CurrentSource())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, ΔT ~ T - T_reading)
  push!(__eqs, ipv ~ G / Gn * (ipv_n + Ki * ΔT))
  push!(__eqs, Vt ~ Ns * (T + ΔT) * k / q)
  push!(__eqs, i0 ~ (Iscn + Ki * ΔT) / (exp((Vocn + Kv * ΔT) / (a * Vt)) - 1))
  push!(__eqs, rolloff ~ (exp((V.v + Rs * Im.i) / (Vt * a)) - 1))
  push!(__eqs, Im.I ~ max(ipv - i0 * rolloff - (V.v + Rs * Im.I) / Rp, 0) * (1 - over_v))
  push!(__eqs, over_v ~ (tanh(2 * (V.v - Vocn)) + 1) / 2)
  push!(__eqs, connect(Im.n, p))
  push!(__eqs, connect(V.n, Im.p, n))
  push!(__eqs, connect(V.p, Im.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export PVCell

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PVCell)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
