### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   PVCell_validate(; name, Rs, Rp, T, Gn, G, ipv_n, Ki, ΔT, a, Ns, Vocn, Iscn, Kv, k, q)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `Rs`         |                          | --  |   0.221 |
| `Rp`         |                          | --  |   415.405 |
| `T`         |                          | --  |   300.15 |
| `Gn`         |                          | --  |   1000 |
| `G`         |                          | --  |   1000 |
| `ipv_n`         |                          | --  |   8.214 |
| `Ki`         |                          | --  |   0.0032 |
| `ΔT`         |                          | --  |    |
| `a`         |                          | --  |   1.3 |
| `Ns`         |                          | --  |   54 |
| `Vocn`         |                          | --  |   32.9 |
| `Iscn`         |                          | --  |   8.21 |
| `Kv`         |                          | --  |   -0.123 |
| `k`         |                          | --  |   1.380649e-23 |
| `q`         |                          | --  |   1.602176634e-19 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `Vt` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `ipv`         |                          | --  | 
| `i0`         |                          | --  | 
| `rolloff`         |                          | --  | 
| `over_v`         |                          | --  | 
"""
@component function PVCell_validate(; name, Rs=0.221, Rp=415.405, T=300.15, Gn=1000, G=1000, ipv_n=8.214, Ki=0.0032, ΔT=nothing, a=1.3, Ns=54, Vocn=32.9, Iscn=8.21, Kv=-0.123, k=1.380649e-23, q=1.602176634e-19)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters
  append!(__params, @parameters (Rs::Real = Rs))
  append!(__params, @parameters (Rp::Real = Rp))
  append!(__params, @parameters (T::Real = T))
  append!(__params, @parameters (Gn::Real = Gn))
  append!(__params, @parameters (G::Real = G))
  append!(__params, @parameters (ipv_n::Real = ipv_n))
  append!(__params, @parameters (Ki::Real = Ki))
  append!(__params, @parameters (ΔT::Real = ΔT))
  append!(__params, @parameters (a::Real = a))
  append!(__params, @parameters (Ns::Real = Ns))
  append!(__params, @parameters (Vocn::Real = Vocn))
  append!(__params, @parameters (Iscn::Real = Iscn))
  append!(__params, @parameters (Kv::Real = Kv))
  append!(__params, @parameters (k::Real = k))
  append!(__params, @parameters (q::Real = q))

  ### Variables
  append!(__vars, @variables (Vt(t)::Real), [output = true])
  append!(__vars, @variables (ipv(t)::Real))
  append!(__vars, @variables (i0(t)::Real))
  append!(__vars, @variables (rolloff(t)::Real))
  append!(__vars, @variables (over_v(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named V = ElectricalComponents.VoltageSensor())
  push!(__systems, @named Im = ElectricalComponents.CurrentSource())

  ### Guesses

  ### Defaults

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  push!(__eqs, ipv ~ G / Gn * (ipv_n + Ki * ΔT))
  push!(__eqs, Vt ~ Ns * (T + ΔT) * k / q)
  push!(__eqs, i0 ~ (Iscn + Ki * ΔT) / (exp((Vocn + Kv * ΔT) / (a * Vt)) - 1))
  push!(__eqs, rolloff ~ (exp((V.v + Rs * Im.i) / (Vt * a)) - 1))
  push!(__eqs, Im.I ~ max(ipv - i0 * rolloff - (V.v + Rs * Im.I) / Rp, 0) * (1 - over_v))
  push!(__eqs, over_v ~ (tanh(2 * (V.v - Vocn)) + 1) / 2)
  push!(__eqs, connect(Im.n, p))
  push!(__eqs, connect(V.n, Im.p, n))
  push!(__eqs, connect(V.p, Im.n))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export PVCell_validate
