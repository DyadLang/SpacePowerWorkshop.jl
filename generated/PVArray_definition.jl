### DO NOT EDIT THIS FILE
### This file is auto-generated by the JSML command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the JSML source code and regenerate this file


"""
   PVArray(; name, q, Gn, Tn, Imp, Vmp, Iscn, Vocn, Kv, Ki, Ns, Np, Rs, Rp, a, Ipvn, k, α1, ϵ, σ, T_min, G_min)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `q`         |                          | --  |   1.60217646e-19 |
| `Gn`         |                          | --  |   1000 |
| `Tn`         |                          | --  |   298.15 |
| `Imp`         |                          | --  |   7.61 |
| `Vmp`         |                          | --  |   26.3 |
| `Iscn`         |                          | --  |   8.21 |
| `Vocn`         |                          | --  |   32.9 |
| `Kv`         |                          | --  |   -0.123 |
| `Ki`         |                          | --  |   0.00318 |
| `Ns`         |                          | --  |   54 |
| `Np`         |                          | --  |   1 |
| `Rs`         |                          | --  |   0.221 |
| `Rp`         |                          | --  |   415.405 |
| `a`         |                          | --  |   1.3 |
| `Ipvn`         |                          | --  |   Iscn |
| `k`         |                          | --  |   1.380649e-23 |
| `α1`         |                          | --  |   0.9 |
| `ϵ`         |                          | --  |   0.8 |
| `σ`         |                          | --  |   5.67e-8 |
| `T_min`         |                          | --  |   27 |
| `G_min`         |                          | --  |   1 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `T` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `G` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         |                          | V  | 
| `i`         |                          | A  | 
| `Vt`         |                          | --  | 
| `Ipv`         |                          | --  | 
| `I0`         |                          | --  | 
| `Id`         |                          | --  | 
| `Ir`         |                          | --  | 
| `i_vneg`         |                          | --  | 
| `i_vpos`         |                          | --  | 
"""
@component function PVArray(; name, q=1.60217646e-19, Gn=1000, Tn=298.15, Imp=7.61, Vmp=26.3, Iscn=8.21, Vocn=32.9, Kv=-0.123, Ki=0.00318, Ns=54, Np=1, Rs=0.221, Rp=415.405, a=1.3, Ipvn=Iscn, k=1.380649e-23, α1=0.9, ϵ=0.8, σ=5.67e-8, T_min=27, G_min=1)
  params = @parameters begin
    (q::Float64 = q)
    (Gn::Float64 = Gn)
    (Tn::Float64 = Tn)
    (Imp::Float64 = Imp)
    (Vmp::Float64 = Vmp)
    (Iscn::Float64 = Iscn)
    (Vocn::Float64 = Vocn)
    (Kv::Float64 = Kv)
    (Ki::Float64 = Ki)
    (Ns::Float64 = Ns)
    (Np::Float64 = Np)
    (Rs::Float64 = Rs)
    (Rp::Float64 = Rp)
    (a::Float64 = a)
    (Ipvn::Float64 = Ipvn)
    (k::Float64 = k)
    (α1::Float64 = α1)
    (ϵ::Float64 = ϵ)
    (σ::Float64 = σ)
    (T_min::Float64 = T_min)
    (G_min::Float64 = G_min)
  end
  vars = @variables begin
    T(t), [input = true]
    G(t), [input = true]
    v(t)
    i(t)
    Vt(t)
    Ipv(t)
    I0(t)
    Id(t)
    Ir(t)
    i_vneg(t)
    i_vpos(t)
  end
  systems = @named begin
    p = __JSML__Pin()
    n = __JSML__Pin()
  end
  defaults = Dict([
  ])
  eqs = Equation[
    v ~ p.v - n.v
    i ~ p.i
    p.i + n.i ~ 0
    # θ = RealInput()# in_sunlight = RealInput()# sun_facing = RealInput() # variable G::Real# variable T::Temperature# i = ifelse(v < -1e-8, v/((Rs + Rp)/Np), ifelse(v > Vocn, 0, -Np*(Ipv - Id - Ir)))# i_vneg = v/((Rs + Rp)/Np)# i_vpos = -Np*(Ipv - Id - Ir)# T = max(((α1 * G)/(ϵ * σ))^(1/4), T_min)# G = max(1361 * cos(θ) * in_sunlight * sun_facing, G_min)# i = min(-Np*(Ipv - Id - Ir), -1e-5)
    Vt ~ Ns * k * T / q
    Ipv ~ (Ipvn + Ki * (T - Tn)) * G / Gn
    I0 ~ (Iscn + Ki * (T - Tn)) / (exp((Vocn + Kv * (T - Tn)) / a / Vt) - 1)
    Id ~ I0 * (exp((v - Rs * i) / a / Vt) - 1)
    Ir ~ (v - Rs * i) / Rp
    i ~ ifelse(v < -1e-8, v / ((Rs + Rp) / Np), ifelse(v > Vocn, 0, -Np * (Ipv - Id - Ir)))
  ]
  return ODESystem(eqs, t, vars, params; systems, defaults, name)
end
export PVArray
Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PVArray)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
