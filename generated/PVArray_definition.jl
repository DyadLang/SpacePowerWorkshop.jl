### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   PVArray(; name, q, Gn, Tn, Imp, Vmp, Iscn, Vocn, Kv, Ki, Ns, Np, Rs, Rp, a, Ipvn, k, α1, ϵ, σ, T_min, G_min)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `q`         |                          | --  |   1.60217646e-19 |
| `Gn`         |                          | --  |   1000 |
| `Tn`         |                          | --  |   298.15 |
| `Imp`         |                          | --  |   7.61 |
| `Vmp`         |                          | --  |   26.3 |
| `Iscn`         |                          | --  |   8.21 |
| `Vocn`         |                          | --  |   32.9 |
| `Kv`         |                          | --  |   -0.123 |
| `Ki`         |                          | --  |   0.00318 |
| `Ns`         |                          | --  |   54 |
| `Np`         |                          | --  |   1 |
| `Rs`         |                          | --  |   0.221 |
| `Rp`         |                          | --  |   415.405 |
| `a`         |                          | --  |   1.3 |
| `Ipvn`         |                          | --  |   Iscn |
| `k`         |                          | --  |   1.380649e-23 |
| `α1`         |                          | --  |   0.9 |
| `ϵ`         |                          | --  |   0.8 |
| `σ`         |                          | --  |   5.67e-8 |
| `T_min`         |                          | --  |   27 |
| `G_min`         |                          | --  |   1 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `T` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `G` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         |                          | V  | 
| `i`         |                          | A  | 
| `Vt`         |                          | --  | 
| `Ipv`         |                          | --  | 
| `I0`         |                          | --  | 
| `Id`         |                          | --  | 
| `Ir`         |                          | --  | 
| `i_vneg`         |                          | --  | 
| `i_vpos`         |                          | --  | 
"""
@component function PVArray(; name, q=1.60217646e-19, Gn=1000, Tn=298.15, Imp=7.61, Vmp=26.3, Iscn=8.21, Vocn=32.9, Kv=-0.123, Ki=0.00318, Ns=54, Np=1, Rs=0.221, Rp=415.405, a=1.3, Ipvn=Iscn, k=1.380649e-23, α1=0.9, ϵ=0.8, σ=5.67e-8, T_min=27, G_min=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (q::Float64 = q))
  append!(__params, @parameters (Gn::Float64 = Gn))
  append!(__params, @parameters (Tn::Float64 = Tn))
  append!(__params, @parameters (Imp::Float64 = Imp))
  append!(__params, @parameters (Vmp::Float64 = Vmp))
  append!(__params, @parameters (Iscn::Float64 = Iscn))
  append!(__params, @parameters (Vocn::Float64 = Vocn))
  append!(__params, @parameters (Kv::Float64 = Kv))
  append!(__params, @parameters (Ki::Float64 = Ki))
  append!(__params, @parameters (Ns::Float64 = Ns))
  append!(__params, @parameters (Np::Float64 = Np))
  append!(__params, @parameters (Rs::Float64 = Rs))
  append!(__params, @parameters (Rp::Float64 = Rp))
  append!(__params, @parameters (a::Float64 = a))
  append!(__params, @parameters (Ipvn::Float64 = Ipvn))
  append!(__params, @parameters (k::Float64 = k))
  append!(__params, @parameters (α1::Float64 = α1))
  append!(__params, @parameters (ϵ::Float64 = ϵ))
  append!(__params, @parameters (σ::Float64 = σ))
  append!(__params, @parameters (T_min::Float64 = T_min))
  append!(__params, @parameters (G_min::Float64 = G_min))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables T(t), [input = true])
  append!(__vars, @variables G(t), [input = true])
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)))
  append!(__vars, @variables (Vt(t)))
  append!(__vars, @variables (Ipv(t)))
  append!(__vars, @variables (I0(t)))
  append!(__vars, @variables (Id(t)))
  append!(__vars, @variables (Ir(t)))
  append!(__vars, @variables (i_vneg(t)))
  append!(__vars, @variables (i_vpos(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  # θ = RealInput()# in_sunlight = RealInput()# sun_facing = RealInput() # variable G::Real# variable T::Temperature# i = ifelse(v < -1e-8, v/((Rs + Rp)/Np), ifelse(v > Vocn, 0, -Np*(Ipv - Id - Ir)))# i_vneg = v/((Rs + Rp)/Np)# i_vpos = -Np*(Ipv - Id - Ir)# T = max(((α1 * G)/(ϵ * σ))^(1/4), T_min)# G = max(1361 * cos(θ) * in_sunlight * sun_facing, G_min)# i = min(-Np*(Ipv - Id - Ir), -1e-5)
  push!(__eqs, Vt ~ Ns * k * T / q)
  push!(__eqs, Ipv ~ (Ipvn + Ki * (T - Tn)) * G / Gn)
  push!(__eqs, I0 ~ (Iscn + Ki * (T - Tn)) / (exp((Vocn + Kv * (T - Tn)) / a / Vt) - 1))
  push!(__eqs, Id ~ I0 * (exp((v - Rs * i) / a / Vt) - 1))
  push!(__eqs, Ir ~ (v - Rs * i) / Rp)
  push!(__eqs, i ~ ifelse(v < -1e-8, v / ((Rs + Rp) / Np), ifelse(v > Vocn, 0, -Np * (Ipv - Id - Ir))))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export PVArray

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PVArray)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
