### DO NOT EDIT THIS FILE
### This file is auto-generated by the JSML command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the JSML source code and regenerate this file


"""
   MPPT_old(; name, startTime, samplePeriod, VmpRef, ImpRef, n)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `startTime`         |                          | --  |   0 |
| `samplePeriod`         |                          | --  |   1 |
| `VmpRef`         |                          | --  |    |
| `ImpRef`         |                          | --  |    |
| `n`         |                          | --  |    |

## Connectors

 * `power` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `vRef` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `dv`         |                          | --  | 
| `dpower`         |                          | --  | 
| `firstTrigger`         |                          | --  | 
| `sampleTrigger`         |                          | --  | 
| `counter`         |                          | --  | 
| `signv`         |                          | --  | 
"""
@component function MPPT_old(; name, startTime=0, samplePeriod=1, VmpRef=nothing, ImpRef=nothing, n=nothing)
  params = @parameters begin
    (startTime::Float64 = startTime)
    (samplePeriod::Float64 = samplePeriod)
    (VmpRef::Float64 = VmpRef)
    (ImpRef::Float64 = ImpRef)
    (n::Float64 = n)
  end
  vars = @variables begin
    power(t), [input = true]
    vRef(t), [output = true]
    dv(t)
    dpower(t)
    firstTrigger(t)
    sampleTrigger(t)
    counter(t)
    signv(t)
  end
  defaults = Dict([
    firstTrigger => (true),
    counter => (1),
  ])
  initialization_eqs = [
    signv ~ -1
  ]
  eqs = Equation[
    dv ~ VmpRef / n
    dpower ~ VmpRef * ImpRef / n
  ]
  return ODESystem(eqs, t, vars, params; systems = [], defaults, name, initialization_eqs)
end
export MPPT_old
Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MPPT_old)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
