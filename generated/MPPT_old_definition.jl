### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   MPPT_old(; name, startTime, samplePeriod, VmpRef, ImpRef, n)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `startTime`         |                          | --  |   0 |
| `samplePeriod`         |                          | --  |   1 |
| `VmpRef`         |                          | --  |    |
| `ImpRef`         |                          | --  |    |
| `n`         |                          | --  |    |

## Connectors

 * `power` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `vRef` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `dv`         |                          | --  | 
| `dpower`         |                          | --  | 
| `firstTrigger`         |                          | --  | 
| `sampleTrigger`         |                          | --  | 
| `counter`         |                          | --  | 
| `signv`         |                          | --  | 
"""
@component function MPPT_old(; name, startTime=0, samplePeriod=1, VmpRef=nothing, ImpRef=nothing, n=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (startTime::Float64 = startTime))
  append!(__params, @parameters (samplePeriod::Float64 = samplePeriod))
  append!(__params, @parameters (VmpRef::Float64 = VmpRef))
  append!(__params, @parameters (ImpRef::Float64 = ImpRef))
  append!(__params, @parameters (n::Float64 = n))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables power(t), [input = true])
  append!(__vars, @variables vRef(t), [output = true])
  append!(__vars, @variables (dv(t)))
  append!(__vars, @variables (dpower(t)))
  append!(__vars, @variables (firstTrigger(t)))
  append!(__vars, @variables (sampleTrigger(t)))
  append!(__vars, @variables (counter(t)))
  append!(__vars, @variables (signv(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()
  __defaults[firstTrigger] = (true)
  __defaults[counter] = (1)

  ### Initialization Equations
  __initialization_eqs = []
  push!(__initialization_eqs, signv ~ -1)

  ### Equations
  __eqs = Equation[]
  push!(__eqs, dv ~ VmpRef / n)
  push!(__eqs, dpower ~ VmpRef * ImpRef / n)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MPPT_old

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MPPT_old)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
