### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   TempSensor(; name, G, A, T_ref, α, ϵ, σ, theta, sunlight)

Temperature sensor model

This temperature sensor uses the hardcoded orbital parameters in the module
to compute the temperature on a solar panel at a given time in the orbit.
For this to work the module defining this must have two 1-argument callables
`theta_interp` and `sunlight_interp`.

Some notes I have from writing this:
- `using SpacePowerWorkshop: theta_interp(::Real)::Real` as suggested in the Dyad docs fails, \
it's a lex and/or parse error but does not give me more information than that.
- How do I declare a variable as output or input?  Do I really have to create a connector specifically for this?
- Following on this, can connectors be nested?
- The lack of comments is pretty annoying.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `G`         | solar irradiance at LEO orbit [W/m^2]                         | --  |   1361 |
| `A`         | solar panel area [m^2]                         | --  |   5 |
| `T_ref`         | reference temperature [K]                         | --  |   300 |
| `α`         | absorptivity of panel                         | --  |   0.9 |
| `ϵ`         | emissivity of panel                         | --  |   0.8 |
| `σ`         | Stefan-Boltzmann constant [W/(m^2*K^4)]                         | --  |   5.67e-8 |
| `theta`         | Interpolator for the angle between the solar panel normal and the Sun direction                         | --  |   theta_interp |
| `sunlight`         | Interpolator for the sunlight intensity (0 to 1)                         | --  |   sunlight_interp |

## Connectors

 * `G_eff` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))
 * `T` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))
 * `time` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
"""
@component function TempSensor(; name, G=1361, A=5, T_ref=300, α=0.9, ϵ=0.8, σ=5.67e-8, theta=theta_interp, sunlight=sunlight_interp)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (G::Real = G), [description = "solar irradiance at LEO orbit [W/m^2]"])
  append!(__params, @parameters (A::Real = A), [description = "solar panel area [m^2]"])
  append!(__params, @parameters (T_ref::Real = T_ref), [description = "reference temperature [K]"])
  append!(__params, @parameters (α::Real = α), [description = "absorptivity of panel"])
  append!(__params, @parameters (ϵ::Real = ϵ), [description = "emissivity of panel"])
  append!(__params, @parameters (σ::Real = σ), [description = "Stefan-Boltzmann constant [W/(m^2*K^4)]"])
  append!(__params, @parameters theta(::Real)::Real = theta)
  append!(__params, @parameters sunlight(::Real)::Real = sunlight)

  ### Variables
  __vars = Any[]
  append!(__vars, @variables G_eff(t), [output = true])
  append!(__vars, @variables T(t), [output = true])
  append!(__vars, @variables time(t), [input = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  # Compute the effective solar irradiance
  push!(__eqs, G_eff ~ max(G * cos(theta(t)) * sunlight(t), 0))
  # Compute the temperature
  push!(__eqs, T ~ max(((α * G_eff) / (ϵ * σ)) ^ (1 / 4), 125))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export TempSensor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(TempSensor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
