### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   DCDC_MPPT(; name, β, q, K, hotel_load, capacity, power_rate)

A simple DC-DC converter with integrated MPPT
Idealized battery

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `β`         |                          | --  |    |
| `q`         |                          | --  |   1.602176634e-19 |
| `K`         |                          | --  |   1.380649e-23 |
| `hotel_load`         |                          | --  |   50 |
| `capacity`         |                          | --  |   4 |
| `power_rate`         |                          | --  |   300 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `T` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `Vt` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         | Voltage across the component (between pin p and pin n).                         | V  | 
| `i`         | Current flowing through the component (from pin p to pin n).                         | A  | 
| `c`         |                          | --  | 
| `stored_energy`         |                          | --  | 
| `charge_power`         |                          | --  | 
"""
@component function DCDC_MPPT(; name, β=nothing, q=1.602176634e-19, K=1.380649e-23, hotel_load=50, capacity=4, power_rate=300)
  __params = Any[]
  __vars = Any[]
  __systems = System[]
  __guesses = Dict()
  __defaults = Dict()
  __initialization_eqs = []
  __eqs = Equation[]

  ### Symbolic Parameters
  append!(__params, @parameters (β::Real = β))
  append!(__params, @parameters (q::Real = q))
  append!(__params, @parameters (K::Real = K))
  append!(__params, @parameters (hotel_load::Real = hotel_load))
  append!(__params, @parameters (capacity::Real = capacity))
  append!(__params, @parameters (power_rate::Real = power_rate))

  ### Variables
  append!(__vars, @variables (T(t)::Real), [input = true])
  append!(__vars, @variables (Vt(t)::Real), [input = true])
  append!(__vars, @variables (v(t)::Real), [description = "Voltage across the component (between pin p and pin n)."])
  append!(__vars, @variables (i(t)::Real), [description = "Current flowing through the component (from pin p to pin n)."])
  append!(__vars, @variables (c(t)::Real))
  append!(__vars, @variables (stored_energy(t)::Real))
  append!(__vars, @variables (charge_power(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())

  ### Guesses

  ### Defaults

  ### Initialization Equations

  ### Assertions
  __assertions = []

  ### Equations
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, log(max(i / v, 0.1)) - c * v ~ β)
  push!(__eqs, c ~ 1 / Vt)
  push!(__eqs, ModelingToolkit.D_nounits(stored_energy) ~ charge_power)
  # line 27 = lower bound
  # line 28 = upper bound
  push!(__eqs, charge_power ~ min(max(i * v - hotel_load, -power_rate * (tanh(10 * (stored_energy - 0.2)) + 1) / 2), power_rate * (tanh(10 * (-stored_energy + capacity)) + 1) / 2))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs, assertions=__assertions)
end
export DCDC_MPPT
