### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   DCDC_MPPT(; name, β, q, K, hotel_load, capacity, power_rate)

A simple DC-DC converter with integrated MPPT# Idealized battery

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `β`         |                          | --  |    |
| `q`         |                          | --  |   1.602176634e-19 |
| `K`         |                          | --  |   1.380649e-23 |
| `hotel_load`         |                          | --  |   50 |
| `capacity`         |                          | --  |   4 |
| `power_rate`         |                          | --  |   300 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `T` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `Vt` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         |                          | V  | 
| `i`         |                          | A  | 
| `c`         |                          | --  | 
| `stored_energy`         |                          | --  | 
| `charge_power`         |                          | --  | 
"""
@component function DCDC_MPPT(; name, β=nothing, q=1.602176634e-19, K=1.380649e-23, hotel_load=50, capacity=4, power_rate=300)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (β::Float64 = β))
  append!(__params, @parameters (q::Float64 = q))
  append!(__params, @parameters (K::Float64 = K))
  append!(__params, @parameters (hotel_load::Float64 = hotel_load))
  append!(__params, @parameters (capacity::Float64 = capacity))
  append!(__params, @parameters (power_rate::Float64 = power_rate))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables T(t), [input = true])
  append!(__vars, @variables Vt(t), [input = true])
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)))
  append!(__vars, @variables (c(t)))
  append!(__vars, @variables (stored_energy(t)))
  append!(__vars, @variables (charge_power(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, log(max(i / v, 0.1)) - c * v ~ β)
  push!(__eqs, c ~ 1 / Vt)
  push!(__eqs, D(stored_energy) ~ charge_power)
  # line 27 = lower bound# line 28 = upper bound
  push!(__eqs, charge_power ~ min(max(i * v - hotel_load, -power_rate * (tanh(10 * (stored_energy - 0.2)) + 1) / 2), power_rate * (tanh(10 * (-stored_energy + capacity)) + 1) / 2))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export DCDC_MPPT

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(DCDC_MPPT)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
